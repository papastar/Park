apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyy_MM_dd_HH_mm")
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        buildConfigField "boolean", "DEV_MODE", "true"
    }


    signingConfigs {
        debug {
        }
        release {
            def signingFile = file("../libcommon/signing.properties")
            if (signingFile.canRead()) {
                def Properties properties = new Properties()
                properties.load(new FileInputStream(signingFile))

                try {
                    storeFile file(properties['STORE_FILE'])
                    storePassword properties['STORE_PASSWORD']
                    keyAlias properties['KEY_ALIAS']
                    keyPassword properties['KEY_PASSWORD']
                    println "RELEASE_BUILD: Signing..."
                } catch (e) {
                    throw new InvalidUserDataException("You should define STORE_FILE and STORE_PASSWORD and KEY_ALIAS and KEY_PASSWORD in signing.properties.")
                }

            } else {
                println "RELEASE_BUILD: signing.properties not found"
            }
        }
    }


    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release

            buildConfigField "boolean", "DEV_MODE", "true"
        }
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            //不显示 Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            //移除无用的 Resource
            shrinkResources true
            //资源文件按4字节对齐
            zipAlignEnabled true
            //关闭调试
            //debuggable false

            // 多渠道打包
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        // 输出apk名称为Elephant_v1.0_2016-10-11_fir.apk
                        //def fileName = "UPark_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                        def fileName = "UPark_v${defaultConfig.versionName}_${releaseTime()}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    //忽略 lint 错误
    lintOptions {
        abortOnError false
    }


}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':libcommon')
    compile project(':libBle')
    compile rootProject.ext.libSupportAppcompat
    compile rootProject.ext.libSupportV4
    compile rootProject.ext.libSupportDesign
    compile rootProject.ext.libRetrofit
    compile rootProject.ext.libRetrofitConverterGson
    compile rootProject.ext.libRetrofitConverterScalars
    compile rootProject.ext.libGson
    compile rootProject.ext.libRetrofitAdapterRxJava
    compile rootProject.ext.libOkHttp
    compile rootProject.ext.libOkio
    compile rootProject.ext.libStetho
    compile rootProject.ext.libStethoOkHttp
    compile rootProject.ext.libBaseAdapter
    compile rootProject.ext.libBaseRecyclerAdapter
    compile rootProject.ext.libOkHttpLoggingInterceptor
    compile rootProject.ext.libTabLayout
    compile 'com.polidea.rxandroidble:rxandroidble:1.0.2'
    compile 'com.flyco.dialog:FlycoDialog_Lib:1.3.2@aar'
}
